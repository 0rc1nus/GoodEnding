package net.orcinus.goodending.init;

import net.minecraft.core.Direction;
import net.minecraft.core.HolderGetter;
import net.minecraft.core.HolderSet;
import net.minecraft.core.registries.Registries;
import net.minecraft.data.worldgen.BootstapContext;
import net.minecraft.data.worldgen.features.FeatureUtils;
import net.minecraft.data.worldgen.features.TreeFeatures;
import net.minecraft.data.worldgen.placement.PlacementUtils;
import net.minecraft.data.worldgen.placement.TreePlacements;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.util.random.SimpleWeightedRandomList;
import net.minecraft.util.valueproviders.ConstantInt;
import net.minecraft.util.valueproviders.UniformFloat;
import net.minecraft.util.valueproviders.UniformInt;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate;
import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
import net.minecraft.world.level.levelgen.feature.Feature;
import net.minecraft.world.level.levelgen.feature.WeightedPlacedFeature;
import net.minecraft.world.level.levelgen.feature.configurations.DiskConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.RandomBooleanFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.RandomFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.SimpleBlockConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.SimpleRandomFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
import net.minecraft.world.level.levelgen.feature.featuresize.ThreeLayersFeatureSize;
import net.minecraft.world.level.levelgen.feature.featuresize.TwoLayersFeatureSize;
import net.minecraft.world.level.levelgen.feature.foliageplacers.DarkOakFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
import net.minecraft.world.level.levelgen.feature.stateproviders.RuleBasedBlockStateProvider;
import net.minecraft.world.level.levelgen.feature.stateproviders.WeightedStateProvider;
import net.minecraft.world.level.levelgen.feature.trunkplacers.DarkOakTrunkPlacer;
import net.minecraft.world.level.levelgen.feature.trunkplacers.StraightTrunkPlacer;
import net.minecraft.world.level.levelgen.placement.PlacedFeature;
import net.minecraft.world.level.material.Fluids;
import net.orcinus.goodending.GoodEnding;
import net.orcinus.goodending.world.gen.features.config.BoulderConfig;
import net.orcinus.goodending.world.gen.features.config.FallenLogConfig;
import net.orcinus.goodending.world.gen.features.config.FancyDarkOakTreeConfig;
import net.orcinus.goodending.world.gen.features.config.HalfWaterloggedDecorationConfig;
import net.orcinus.goodending.world.gen.features.config.MuddyOakFeatureConfig;
import net.orcinus.goodending.world.gen.features.config.ShallowWaterConfig;
import net.orcinus.goodending.world.gen.features.config.WaterTreeFeatureConfig;

import java.util.List;
import java.util.OptionalInt;

public class GoodEndingConfiguredFeatures {
    public static final ResourceKey<ConfiguredFeature<?, ?>> SHALLOW_WATER_MUD = register("shallow_water_mud");
    public static final ResourceKey<ConfiguredFeature<?, ?>> PATCH_ALGAE = register("patch_algae");
    public static final ResourceKey<ConfiguredFeature<?, ?>> CYPRESS_TREE = register("cypress_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> CYPRESS_TREE_PLANTED = register("cypress_tree_planted");
    public static final ResourceKey<ConfiguredFeature<?, ?>> CYPRESS_TREE_FILTERED = register("cypress_tree_filtered");
    public static final ResourceKey<ConfiguredFeature<?, ?>> MUDDY_OAK_TREE = register("swamp_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> MARSH_MUDDY_OAK_TREE = register("marsh_swamp_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> CATTAIL_PATCH = register("cattail_patch");
    public static final ResourceKey<ConfiguredFeature<?, ?>> SWAMP_FALLEN_LOG = register("swamp_fallen_log");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIRCH_FALLEN_LOG = register("birch_fallen_log");
    public static final ResourceKey<ConfiguredFeature<?, ?>> OAK_FALLEN_LOG = register("oak_fallen_log");
    public static final ResourceKey<ConfiguredFeature<?, ?>> SPRUCE_FALLEN_LOG = register("spruce_fallen_log");
    public static final ResourceKey<ConfiguredFeature<?, ?>> ACACIA_FALLEN_LOG = register("acacia_fallen_log");
    public static final ResourceKey<ConfiguredFeature<?, ?>> SWAMP_VEGETATION = register("swamp_vegetation");
    public static final ResourceKey<ConfiguredFeature<?, ?>> DUCKWEED_PATCH = register("duckweed_patch");
    public static final ResourceKey<ConfiguredFeature<?, ?>> PATCH_PASTEL_WILDFLOWERS = register("patch_pastel_wildflowers");
    public static final ResourceKey<ConfiguredFeature<?, ?>> PATCH_TWILIGHT_WILDFLOWERS = register("patch_twilight_wildflowers");
    public static final ResourceKey<ConfiguredFeature<?, ?>> PATCH_SPICY_WILDFLOWERS = register("patch_spicy_wildflowers");
    public static final ResourceKey<ConfiguredFeature<?, ?>> PATCH_BALMY_WILDFLOWERS = register("patch_balmy_wildflowers");
    public static final ResourceKey<ConfiguredFeature<?, ?>> PATCH_TALL_GRASS = register("patch_tall_grass");
    public static final ResourceKey<ConfiguredFeature<?, ?>> PATCH_TALL_GRASS_MARSH = register("patch_tall_grass_marsh");
    public static final ResourceKey<ConfiguredFeature<?, ?>> TALL_BIRCH_TREE = register("tall_birch_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> TALL_BIRCH_VEGETATION = register("tall_birch_vegetation");
    public static final ResourceKey<ConfiguredFeature<?, ?>> PATCH_PINK_FLOWERED_LILY = register("patch_pink_flowered_lily");
    public static final ResourceKey<ConfiguredFeature<?, ?>> PATCH_FERN = register("patch_fern");
    public static final ResourceKey<ConfiguredFeature<?, ?>> PATCH_LARGE_FERN = register("patch_large_fern");
    public static final ResourceKey<ConfiguredFeature<?, ?>> OAK_HAMMOCK_PATCH_TALL_GRASS = register("oak_hammock_patch_tall_grass");
    public static final ResourceKey<ConfiguredFeature<?, ?>> LARGE_LILY_PADS = register("large_lily_pads");
    public static final ResourceKey<ConfiguredFeature<?, ?>> PATCH_FLOWERING_WATERLILY = register("patch_flowering_waterlily");
    public static final ResourceKey<ConfiguredFeature<?, ?>> DISK_PODZOL = register("disk_podzol");
    public static final ResourceKey<ConfiguredFeature<?, ?>> FANCY_DARK_OAK = register("fancy_dark_oak");
    public static final ResourceKey<ConfiguredFeature<?, ?>> FANCY_DARK_OAK_PLANTED = register("fancy_dark_oak_planted");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_FANCY_DARK_OAK = register("big_fancy_dark_oak");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_FANCY_DARK_OAK_PLANTED = register("big_fancy_dark_oak_planted");
    public static final ResourceKey<ConfiguredFeature<?, ?>> OAK_HAMMOCK_TREES = register("oak_hammock_trees");
    public static final ResourceKey<ConfiguredFeature<?, ?>> GRANITE_BOULDER = register("granite_boulder");
    public static final ResourceKey<ConfiguredFeature<?, ?>> PLAINS_BOULDER = register("plains_boulder");
    public static final ResourceKey<ConfiguredFeature<?, ?>> DESERT_BOULDER = register("desert_boulder");
    public static final ResourceKey<ConfiguredFeature<?, ?>> RED_SANDSTONE_BOULDER = register("red_sandstone_boulder");
    public static final ResourceKey<ConfiguredFeature<?, ?>> SMOOTH_BASALT_BOULDER = register("smooth_basalt_boulder");
    public static final ResourceKey<ConfiguredFeature<?, ?>> STONE_BOULDER = register("stone_boulder");
    public static final ResourceKey<ConfiguredFeature<?, ?>> TUFF_BOULDER = register("tuff_boulder");
    public static final ResourceKey<ConfiguredFeature<?, ?>> COBBLESTONE_BOULDER = register("cobblestone_boulder");
    public static final ResourceKey<ConfiguredFeature<?, ?>> MOSSY_COBBLESTONE_BOULDER = register("mossy_cobblestone_boulder");
    public static final ResourceKey<ConfiguredFeature<?, ?>> MOSSIER_COBBLESTONE_BOULDER = register("mossier_cobblestone_boulder");

    public static void bootstrap(BootstapContext<ConfiguredFeature<?, ?>> ctx) {
        HolderGetter<ConfiguredFeature<?, ?>> holderGetter = ctx.lookup(Registries.CONFIGURED_FEATURE);
        HolderGetter<PlacedFeature> holderGetter1 = ctx.lookup(Registries.PLACED_FEATURE);
        FeatureUtils.register(ctx, SHALLOW_WATER_MUD, GoodEndingFeatures.SHALLOW_WATER, new ShallowWaterConfig(BlockStateProvider.simple(Blocks.MUD), true, false, 6, 0.25F));
        FeatureUtils.register(ctx, PATCH_ALGAE, GoodEndingFeatures.ALGAE_PATCH, new NoneFeatureConfiguration());
//        FeatureUtils.register(ctx, CYPRESS_TREE, GoodEndingFeatures.CYPRESS_TREE, new WaterTreeFeatureConfig.WaterTreeFeatureBuilder(BlockStateProvider.simple(Blocks.OAK_LOG), new DarkOakTrunkPlacer(6, 2, 1), BlockStateProvider.simple(Blocks.OAK_LEAVES), new DarkOakFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new ThreeLayersFeatureSize(1, 1, 0, 1, 2, OptionalInt.empty()), false).build());
//        FeatureUtils.register(ctx, CYPRESS_TREE_PLANTED, GoodEndingFeatures.CYPRESS_TREE, new WaterTreeFeatureConfig.WaterTreeFeatureBuilder(BlockStateProvider.simple(Blocks.OAK_LOG), new DarkOakTrunkPlacer(6, 2, 1), BlockStateProvider.simple(Blocks.OAK_LEAVES), new DarkOakFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new ThreeLayersFeatureSize(1, 1, 0, 1, 2, OptionalInt.empty()), true).build());
//        FeatureUtils.register(ctx, CYPRESS_TREE_FILTERED, Feature.RANDOM_SELECTOR, new RandomFeatureConfiguration(List.of(new WeightedPlacedFeature(holderGetter1.getOrThrow(GoodEndingPlacedFeatures.CYPRESS_TREE_CHECKED), 0.8F)), holderGetter1.getOrThrow(GoodEndingPlacedFeatures.CYPRESS_TREE_CHECKED)));
//        FeatureUtils.register(ctx, MUDDY_OAK_TREE, GoodEndingFeatures.MUDDY_OAK_TREE_FEATURE, new MuddyOakFeatureConfig.MuddyOakFeatureBuilder(BlockStateProvider.simple(GoodEndingBlocks.MUDDY_OAK_LOG), new DarkOakTrunkPlacer(6, 2, 1), BlockStateProvider.simple(Blocks.OAK_LEAVES), new DarkOakFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new ThreeLayersFeatureSize(1, 1, 0, 1, 2, OptionalInt.empty()), true).build());
//        FeatureUtils.register(ctx, MARSH_MUDDY_OAK_TREE, GoodEndingFeatures.MUDDY_OAK_TREE_FEATURE, new MuddyOakFeatureConfig.MuddyOakFeatureBuilder(BlockStateProvider.simple(GoodEndingBlocks.MUDDY_OAK_LOG), new DarkOakTrunkPlacer(6, 2, 1), BlockStateProvider.simple(Blocks.OAK_LEAVES), new DarkOakFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new ThreeLayersFeatureSize(1, 1, 0, 1, 2, OptionalInt.empty()), false).build());
        FeatureUtils.register(ctx, CATTAIL_PATCH, GoodEndingFeatures.HALF_WATERLOGGED_DECORATION, new HalfWaterloggedDecorationConfig(BlockStateProvider.simple(GoodEndingBlocks.CATTAIL), UniformInt.of(6, 8)));
        FeatureUtils.register(ctx, SWAMP_FALLEN_LOG, GoodEndingFeatures.FALLEN_LOG, new FallenLogConfig(BlockStateProvider.simple(GoodEndingBlocks.MUDDY_OAK_LOG), UniformInt.of(4, 6), false, true));
        FeatureUtils.register(ctx, BIRCH_FALLEN_LOG, GoodEndingFeatures.FALLEN_LOG, new FallenLogConfig(BlockStateProvider.simple(Blocks.BIRCH_LOG), UniformInt.of(6, 8), true, true, false));
        FeatureUtils.register(ctx, OAK_FALLEN_LOG, GoodEndingFeatures.FALLEN_LOG, new FallenLogConfig(BlockStateProvider.simple(Blocks.OAK_LOG), UniformInt.of(6, 8), false, true, false));
        FeatureUtils.register(ctx, SPRUCE_FALLEN_LOG, GoodEndingFeatures.FALLEN_LOG, new FallenLogConfig(BlockStateProvider.simple(Blocks.SPRUCE_LOG), UniformInt.of(6, 8), false, false, false));
        FeatureUtils.register(ctx, ACACIA_FALLEN_LOG, GoodEndingFeatures.FALLEN_LOG, new FallenLogConfig(BlockStateProvider.simple(Blocks.ACACIA_LOG), UniformInt.of(4, 6), false, false, false));
        FeatureUtils.register(ctx, SWAMP_VEGETATION, Feature.RANDOM_BOOLEAN_SELECTOR, new RandomBooleanFeatureConfiguration(PlacementUtils.inlinePlaced(holderGetter.getOrThrow(TreeFeatures.HUGE_BROWN_MUSHROOM)), PlacementUtils.inlinePlaced(holderGetter.getOrThrow(TreeFeatures.HUGE_RED_MUSHROOM))));
        FeatureUtils.register(ctx, DUCKWEED_PATCH, GoodEndingFeatures.DUCKWEED_PATCH, new NoneFeatureConfiguration());
        FeatureUtils.register(ctx, PATCH_PASTEL_WILDFLOWERS, Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(GoodEndingBlocks.PASTEL_WILDFLOWERS)), List.of(Blocks.GRASS_BLOCK)));
        FeatureUtils.register(ctx, PATCH_TWILIGHT_WILDFLOWERS, Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(GoodEndingBlocks.TWILIGHT_WILDFLOWERS)), List.of(Blocks.GRASS_BLOCK, Blocks.MUD, Blocks.COARSE_DIRT, Blocks.PODZOL)));
        FeatureUtils.register(ctx, PATCH_SPICY_WILDFLOWERS, Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(GoodEndingBlocks.SPICY_WILDFLOWERS)), List.of(Blocks.GRASS_BLOCK, Blocks.COARSE_DIRT, Blocks.PODZOL)));
        FeatureUtils.register(ctx, PATCH_BALMY_WILDFLOWERS, Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(GoodEndingBlocks.BALMY_WILDFLOWERS)), List.of(Blocks.GRASS_BLOCK)));
        FeatureUtils.register(ctx, PATCH_TALL_GRASS, Feature.RANDOM_PATCH, new RandomPatchConfiguration(32, 7, 3, PlacementUtils.filtered(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.GRASS.defaultBlockState(), 10).add(GoodEndingBlocks.POLLENFLAKE.defaultBlockState(), 7).add(Blocks.AZURE_BLUET.defaultBlockState(), 10).add(Blocks.OXEYE_DAISY.defaultBlockState(), 10))), BlockPredicate.allOf(BlockPredicate.ONLY_IN_AIR_PREDICATE, BlockPredicate.not(BlockPredicate.matchesBlocks(Direction.DOWN.getNormal(), Blocks.PODZOL))))));
        FeatureUtils.register(ctx, PATCH_TALL_GRASS_MARSH, Feature.RANDOM_PATCH, new RandomPatchConfiguration(32, 7, 3, PlacementUtils.inlinePlaced(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.TALL_GRASS)))));
        FeatureUtils.register(ctx, TALL_BIRCH_TREE, GoodEndingFeatures.TALL_BIRCH_TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.BIRCH_LOG), new StraightTrunkPlacer(5, 2, 1), BlockStateProvider.simple(Blocks.BIRCH_LEAVES), new DarkOakFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new TwoLayersFeatureSize(0,0,0)).build());
        FeatureUtils.register(ctx, TALL_BIRCH_VEGETATION, Feature.RANDOM_SELECTOR, new RandomFeatureConfiguration(List.of(new WeightedPlacedFeature(holderGetter1.getOrThrow(GoodEndingPlacedFeatures.TALL_BIRCH_TREE_FILTERED), 0.5F)), PlacementUtils.inlinePlaced(holderGetter.getOrThrow(PATCH_TALL_GRASS))));
        FeatureUtils.register(ctx, PATCH_PINK_FLOWERED_LILY, Feature.RANDOM_PATCH, new RandomPatchConfiguration(6, 2, 3, PlacementUtils.inlinePlaced(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(GoodEndingBlocks.PINK_FLOWERING_LILY_PAD)))));
        FeatureUtils.register(ctx, PATCH_FERN, Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.FERN))));
        FeatureUtils.register(ctx, PATCH_LARGE_FERN, Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.LARGE_FERN)), List.of(), 24));
        FeatureUtils.register(ctx, OAK_HAMMOCK_PATCH_TALL_GRASS, Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.TALL_GRASS)), List.of(), 24));
        FeatureUtils.register(ctx, LARGE_LILY_PADS, GoodEndingFeatures.LARGE_LILY_PADS, new NoneFeatureConfiguration());
        FeatureUtils.register(ctx, PATCH_FLOWERING_WATERLILY, Feature.RANDOM_PATCH, new RandomPatchConfiguration(10, 7, 3, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_RANDOM_SELECTOR, new SimpleRandomFeatureConfiguration(HolderSet.direct(PlacementUtils.inlinePlaced(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(GoodEndingBlocks.PURPLE_FLOWERING_LILY_PAD.defaultBlockState(), 1).add(GoodEndingBlocks.YELLOW_FLOWERING_LILY_PAD.defaultBlockState(), 1).add(GoodEndingBlocks.PINK_FLOWERING_LILY_PAD.defaultBlockState(), 1)))))))));
        FeatureUtils.register(ctx, DISK_PODZOL, Feature.DISK, new DiskConfiguration(new RuleBasedBlockStateProvider(BlockStateProvider.simple(Blocks.PODZOL), List.of(new RuleBasedBlockStateProvider.Rule(BlockPredicate.not(BlockPredicate.anyOf(BlockPredicate.matchesBlocks(Blocks.COARSE_DIRT), BlockPredicate.solid(Direction.UP.getNormal()), BlockPredicate.matchesFluids(Direction.UP.getNormal(), Fluids.WATER))), BlockStateProvider.simple(Blocks.PODZOL)))), BlockPredicate.matchesBlocks(List.of(Blocks.GRASS_BLOCK, Blocks.DIRT, Blocks.COARSE_DIRT)), UniformInt.of(2, 6), 0));
//        FeatureUtils.register(ctx, FANCY_DARK_OAK, GoodEndingFeatures.FANCY_DARK_OAK, new FancyDarkOakTreeConfig.FancyDarkOakTreeConfigBuilder(false, false).build());
//        FeatureUtils.register(ctx, FANCY_DARK_OAK_PLANTED, GoodEndingFeatures.FANCY_DARK_OAK, new FancyDarkOakTreeConfig.FancyDarkOakTreeConfigBuilder(false, true).build());
//        FeatureUtils.register(ctx, BIG_FANCY_DARK_OAK, GoodEndingFeatures.FANCY_DARK_OAK, new FancyDarkOakTreeConfig.FancyDarkOakTreeConfigBuilder(true, false).build());
//        FeatureUtils.register(ctx, BIG_FANCY_DARK_OAK_PLANTED, GoodEndingFeatures.FANCY_DARK_OAK, new FancyDarkOakTreeConfig.FancyDarkOakTreeConfigBuilder(true, true).build());
//        FeatureUtils.register(ctx, OAK_HAMMOCK_TREES, Feature.RANDOM_SELECTOR, new RandomFeatureConfiguration(List.of(new WeightedPlacedFeature(holderGetter1.getOrThrow(TreePlacements.FANCY_OAK_CHECKED), 0.2F), new WeightedPlacedFeature(PlacementUtils.inlinePlaced(holderGetter.getOrThrow(FANCY_DARK_OAK)), 0.8F), new WeightedPlacedFeature(PlacementUtils.inlinePlaced(holderGetter.getOrThrow(BIG_FANCY_DARK_OAK)), 0.78F)), PlacementUtils.inlinePlaced(holderGetter.getOrThrow(FANCY_DARK_OAK))));
        FeatureUtils.register(ctx, GRANITE_BOULDER, GoodEndingFeatures.BOULDER, new BoulderConfig(true, BlockStateProvider.simple(Blocks.LIGHT_GRAY_TERRACOTTA), BlockStateProvider.simple(Blocks.GRANITE), UniformFloat.of(2, 4.2F)));
        FeatureUtils.register(ctx, PLAINS_BOULDER, GoodEndingFeatures.BOULDER, new BoulderConfig(true, BlockStateProvider.simple(Blocks.STONE), BlockStateProvider.simple(Blocks.TUFF), UniformFloat.of(2, 3.5F)));
        FeatureUtils.register(ctx, DESERT_BOULDER, GoodEndingFeatures.BOULDER, new BoulderConfig(true, BlockStateProvider.simple(Blocks.SANDSTONE), BlockStateProvider.simple(Blocks.SANDSTONE), UniformFloat.of(2, 3.5F)));
        FeatureUtils.register(ctx, RED_SANDSTONE_BOULDER, GoodEndingFeatures.BOULDER, new BoulderConfig(true, BlockStateProvider.simple(Blocks.RED_SANDSTONE), BlockStateProvider.simple(Blocks.RED_SANDSTONE), UniformFloat.of(2, 3.5F)));
        FeatureUtils.register(ctx, SMOOTH_BASALT_BOULDER, GoodEndingFeatures.BOULDER, new BoulderConfig(true, BlockStateProvider.simple(Blocks.SMOOTH_BASALT), BlockStateProvider.simple(Blocks.SMOOTH_BASALT), UniformFloat.of(2.3F, 5.4F)));
        FeatureUtils.register(ctx, STONE_BOULDER, GoodEndingFeatures.BOULDER, new BoulderConfig(true, BlockStateProvider.simple(Blocks.STONE), BlockStateProvider.simple(Blocks.STONE), UniformFloat.of(2.1F, 4.8F)));
        FeatureUtils.register(ctx, TUFF_BOULDER, GoodEndingFeatures.BOULDER, new BoulderConfig(true, BlockStateProvider.simple(Blocks.TUFF), BlockStateProvider.simple(Blocks.TUFF), UniformFloat.of(2.2F, 5.2F)));
        FeatureUtils.register(ctx, COBBLESTONE_BOULDER, GoodEndingFeatures.BOULDER, new BoulderConfig(true, BlockStateProvider.simple(Blocks.COBBLESTONE), BlockStateProvider.simple(Blocks.COBBLESTONE), UniformFloat.of(2F, 3F)));
        FeatureUtils.register(ctx, MOSSY_COBBLESTONE_BOULDER, GoodEndingFeatures.BOULDER, new BoulderConfig(true, BlockStateProvider.simple(Blocks.MOSSY_COBBLESTONE), BlockStateProvider.simple(Blocks.COBBLESTONE), UniformFloat.of(2F, 3F)));
        FeatureUtils.register(ctx, MOSSIER_COBBLESTONE_BOULDER, GoodEndingFeatures.BOULDER, new BoulderConfig(false, BlockStateProvider.simple(Blocks.MOSS_BLOCK), BlockStateProvider.simple(Blocks.MOSSY_COBBLESTONE), UniformFloat.of(2, 4.2F)));
    }

    public static ResourceKey<ConfiguredFeature<?, ?>> register(String string) {
        return ResourceKey.create(Registries.CONFIGURED_FEATURE, new ResourceLocation(GoodEnding.MODID, string));
    }

}
